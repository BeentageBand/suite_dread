/*=====================================================================================*/
/**
 * dread_thread.cpp
 * author : puch
 * date : Oct 22 2015
 *
 * description : Any comments
 *
 */
/*=====================================================================================*/

/*=====================================================================================*
 * Project Includes
 *=====================================================================================*/
#include "dread_thread.h"
/*=====================================================================================* 
 * Standard Includes
 *=====================================================================================*/
#include <thread>
/*=====================================================================================* 
 * Local X-Macros
 *=====================================================================================*/

/*=====================================================================================* 
 * Local Define Macros
 *=====================================================================================*/

/*=====================================================================================* 
 * Local Type Definitions
 *=====================================================================================*/
using namespace dread;

class Thread_Implements : public Thread
{
   std::thread thread;
public:
   Thread_Implements(uint32_t const thread_id, std::string const & thread_name)
: Thread(thread_id, thread_name),
  thread()
{

}
   ~Thread_Implements(void){}

public:
   void launch(void)
   {

   }


private:

};
/*=====================================================================================* 
 * Local Object Definitions
 *=====================================================================================*/
static int Thread_Return = -1;
/*=====================================================================================* 
 * Exported Object Definitions
 *=====================================================================================*/

/*=====================================================================================* 
 * Local Function Prototypes
 *=====================================================================================*/

/*=====================================================================================* 
 * Local Inline-Function Like Macros
 *=====================================================================================*/

/*=====================================================================================* 
 * Local Function Definitions
 *=====================================================================================*/

/*=====================================================================================* 
 * Exported Function Definitions
 *=====================================================================================*/
Thread::Thread(uint32_t const thread_id, std::string const & thread_name)
: thread_id(thread_id),
  thread_name(thread_name),
  thread_impl()
{}

Thread::~Thread(void)
{}

void Thread::launch(void)
{
   this->thread_impl.reset(new Thread_Implements(this->thread_id, this->thread_impl));
   this->thread_impl->launch();
}

void * Thread_Launcher_Main(void * args)
{
   Thread_Return = -1;
   Thread * this_thread = static_cast<Thread * >(args);
   if(nullptr != this_thread)
   {

      Thread_Return = this_thread->run();
   }
   return &Thread_Return;
}
/*=====================================================================================* 
 * dread_thread.cpp
 *=====================================================================================*
 * Log History
 *
 *=====================================================================================*/
